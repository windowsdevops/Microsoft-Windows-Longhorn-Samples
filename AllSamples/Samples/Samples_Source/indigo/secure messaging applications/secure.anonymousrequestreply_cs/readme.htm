<html>
	

<head>
<meta http-equiv=Content-Type content="text/html; charset=windows-1252">
<meta name=Generator content="Microsoft Word 11 (filtered)">
<title>The RequestReply Sample</title>
<style>
<!--
 /* Font Definitions */
 @font-face
	{font-family:SimSun;
	panose-1:2 1 6 0 3 1 1 1 1 1;}
@font-face
	{font-family:"\@SimSun";
	panose-1:2 1 6 0 3 1 1 1 1 1;}
 /* Style Definitions */
 p.MsoNormal, li.MsoNormal, div.MsoNormal
	{margin:0in;
	margin-bottom:.0001pt;
	font-size:12.0pt;
	font-family:"Times New Roman";}
h2
	{margin-right:0in;
	margin-left:0in;
	font-size:18.0pt;
	font-family:"Times New Roman";
	font-weight:bold;}
h3
	{margin-right:0in;
	margin-left:0in;
	font-size:13.5pt;
	font-family:"Times New Roman";
	font-weight:bold;}
p.MsoCommentText, li.MsoCommentText, div.MsoCommentText
	{margin:0in;
	margin-bottom:.0001pt;
	font-size:10.0pt;
	font-family:"Times New Roman";}
a:link, span.MsoHyperlink
	{color:blue;
	text-decoration:underline;}
a:visited, span.MsoHyperlinkFollowed
	{color:blue;
	text-decoration:underline;}
p
	{margin-right:0in;
	margin-left:0in;
	font-size:12.0pt;
	font-family:"Times New Roman";}
pre
	{margin:0in;
	margin-bottom:.0001pt;
	font-size:10.0pt;
	font-family:"Courier New";}
@page Section1
	{size:8.5in 11.0in;
	margin:1.0in 1.25in 1.0in 1.25in;}
div.Section1
	{page:Section1;}
 /* List Definitions */
 ol
	{margin-bottom:0in;}
ul
	{margin-bottom:0in;}
-->
</style>

</head>

	

<body lang=EN-US link=blue vlink=blue>

<div class=Section1>

<h2><span style='font-family:Arial'>The AnonymousRequestReply Sample</span></h2>

<h3><span style='font-family:Arial'>"Indigo" - PDC Drop, October 2003</span></h3>

<h3><span style='font-family:Arial'>Contents</span></h3>

<p><span style='font-family:Arial'>This document contains the following
sections:<br>
&nbsp;&nbsp;&nbsp;<a href="#Overview">Overview</a><br>
&nbsp;&nbsp;&nbsp;<a href="#KeyConcepts">Key Concepts</a><br>
&nbsp;&nbsp;&nbsp;<a href="#Building">Building</a><br>
&nbsp;&nbsp;&nbsp;<a href="#Running">Running</a></span></p>

<h3><a name="#Overview">Overview</a></h3>

<p><span style='font-family:Arial'>The "Longhorn" communications subsystem (code-named "Indigo") can be used to help secure applications.
The AnonymousRequestReply sample is a basic
application consisting of a client, a service, a service host, and
client and host configuration files. It demonstrates how to allow an anonymous
user to access a service method when the security manager is enabled.  The
client is a console application that lets you enter a name and sends the name
to the server. The server is a console application that responds to greetings
with a response. </span></p>

<h3><span style='font-family:Arial'>Key Concepts</span></h3>

<p><a name="#KeyConcepts"></a><b><span style='font-family:Arial'>Client:</span></b><span
style='font-family:Arial'><br>
The client is a simple console application that uses a configuration file to
store settings for the objects that it uses.</span></p>

<pre><span style='color:#202080'>    </span></pre><pre><span style='color:#202080'>&lt;configuration&gt;</span></pre><pre><span
style='color:#202080'>  &lt;system.messagebus&gt;</span></pre><pre><span
style='color:#202080'>    &lt;serviceEnvironments&gt;</span></pre><pre><span
style='color:#202080'>      &lt;serviceEnvironment name=&quot;main&quot;&gt;</span></pre><pre><span
style='color:#202080'>        &lt;port&gt;</span></pre><pre><span
style='color:#202080'>            &lt;identityRole&gt;soap.tcp://localhost:46001/HelloClient/&lt;/identityRole&gt;</span></pre><pre><span
style='color:#202080'>        &lt;/port&gt;</span></pre><pre><span
style='color:#202080'>        &lt;!-- WARNING: This sample is not secured to clarify demonstration. --&gt;</span></pre><pre><span
style='color:#202080'>        &lt;remove name=&quot;securityManager&quot; /&gt;</span></pre><pre><span
style='color:#202080'>        &lt;policyManager&gt;</span></pre><pre><span
style='color:#202080'>          &lt;!-- Permits untrusted policy statements. Default requires signed policy statements. --&gt;</span></pre><pre><span
style='color:#202080'>          &lt;areUntrustedPolicyAttachmentsAccepted&gt;true&lt;/areUntrustedPolicyAttachmentsAccepted&gt;</span></pre><pre><span
style='color:#202080'>          &lt;isPolicyReturned&gt;true&lt;/isPolicyReturned&gt;</span></pre><pre><span
style='color:#202080'>        &lt;/policyManager&gt;</span></pre><pre><span
style='color:#202080'>      &lt;/serviceEnvironment&gt;</span></pre><pre><span
style='color:#202080'>    &lt;/serviceEnvironments&gt;</span></pre><pre><span
style='color:#202080'>  &lt;/system.messagebus&gt;</span></pre><pre><span
style='color:#202080'>&lt;/configuration&gt;</span></pre><pre><span
style='color:#202080'>&nbsp;</span></pre>

<p><span style='font-family:Arial'>The client loads this configuration data,
uses the service manager to create a proxy that represents a service, and
invokes the method on the proxy. Because this service method is an RPC-style or
request-reply style method, the execution of the client stops until the call
returns. For details, see  &quot;Choosing Between ServiceMethodAttribute and
ServiceMessageAttribute&quot; in the documentation.</span></p>

<p><span style='font-family:Arial'>It is important to realize that although
this client sends SOAP 1.2 messages to communicate with the service, you
interact with this service in your client as though it were a local call and
used no custom parameter types. </span></p>

<pre><span style='color:#202080'>   </span></pre><pre><span style='color:#202080'>    // Load the default service environment, called &quot;main&quot;.</span></pre><pre><span
style='color:#202080'>    ServiceEnvironment se = ServiceEnvironment.Load();</span></pre><pre><span
style='color:#202080'>&nbsp;</span></pre><pre><span style='color:#202080'>    // Retrieve the ServiceManager from the default environment</span></pre><pre><span
style='color:#202080'>    ServiceManager manager = se[typeof(ServiceManager)] as ServiceManager;</span></pre><pre><span
style='color:#202080'>    if (manager == null)</span></pre><pre><span
style='color:#202080'>    {</span></pre><pre><span style='color:#202080'>        throw new ApplicationException</span></pre><pre><span
style='color:#202080'>        (</span></pre><pre><span style='color:#202080'>            &quot;The service manager is not available in the service se.&quot;</span></pre><pre><span
style='color:#202080'>        );</span></pre><pre><span style='color:#202080'>    }</span></pre><pre><span
style='color:#202080'>&nbsp;</span></pre><pre><span style='color:#202080'>    // Start the service environment.</span></pre><pre><span
style='color:#202080'>    se.Open();</span></pre><pre><span style='color:#202080'>&nbsp;</span></pre><pre><span
style='color:#202080'>    // Create a proxy channel that points to the service to call.</span></pre><pre><span
style='color:#202080'>    Uri uri = new Uri(&quot;soap.tcp://localhost:46000/HelloService/&quot;);</span></pre><pre><span
style='color:#202080'>    IHelloChannel channel = (IHelloChannel)manager.CreateChannel(typeof(IHelloChannel), uri);</span></pre><pre><span
style='color:#202080'>&nbsp;</span></pre><pre><span style='color:#202080'>    try </span></pre><pre><span
style='color:#202080'>    {</span></pre><pre><span style='color:#202080'>        Console.WriteLine(channel.Greeting(name));</span></pre><pre><span
style='color:#202080'>    }</span></pre><pre><span style='color:#202080'>    catch(Exception Ex)</span></pre><pre><span
style='color:#202080'>    {</span></pre><pre><span style='color:#202080'>        Console.WriteLine(Ex);</span></pre><pre><span
style='color:#202080'>    }</span></pre><pre><span style='color:#202080'>    finally</span></pre><pre><span
style='color:#202080'>    {</span></pre><pre><span style='color:#202080'>        se.Close();</span></pre><pre><span
style='color:#202080'>    }</span></pre>

<p><b><span style='font-family:Arial'>Host:</span></b></p>

<p class=MsoNormal><br>
The host application configures "Indigo" to listen for incoming messages for
the services listed in the <b>&lt;activatableServices&gt;</b> element. 
Furthermore, it defines a custom <i>anonymous</i> profile that allows anonymous
users to access the service method.  By default, there is no profile in the
main service environment that allows anonymous access when security is
enabled.  The scope used by the service method is then bound to the custom
profile, allowing the service method to accept anonymous connections.   <span
style='color:#202080'>   </span></p>

<pre><span style='color:navy'>&lt;configuration&gt;</span></pre><pre><span
style='color:navy'>  &lt;system.messagebus&gt;</span></pre><pre><span
style='color:navy'>    &lt;serviceEnvironments&gt;</span></pre><pre><span
style='color:navy'>      &lt;serviceEnvironment name=&quot;main&quot;&gt;</span></pre><pre><span
style='color:navy'>        &lt;port&gt;</span></pre><pre><span
style='color:navy'>          &lt;identityRole&gt;soap.tcp://localhost:46000/HelloService/&lt;/identityRole&gt;</span></pre><pre><span
style='color:navy'>        &lt;/port&gt;</span></pre><pre><span
style='color:navy'>        &lt;policyManager&gt;</span></pre><pre><span
style='color:navy'>          &lt;!-- Permits unsigned policy statements. Default requires signed policy statements. --&gt;</span></pre><pre><span
style='color:navy'>          &lt;areUntrustedPolicyAttachmentsAccepted&gt;true&lt;/areUntrustedPolicyAttachmentsAccepted&gt;</span></pre><pre><span
style='color:navy'>          &lt;isPolicyReturned&gt;true&lt;/isPolicyReturned&gt;</span></pre><pre><span
style='color:navy'>        &lt;/policyManager&gt;</span></pre><pre><span
style='color:navy'>         &lt;serviceManager&gt;</span></pre><pre><span
style='color:navy'>          &lt;activatableServices&gt;</span></pre><pre><span
style='color:navy'>            &lt;add type=&quot;Microsoft.MessageBus.QuickStarts.Hello, HelloService&quot; /&gt;</span></pre><pre><span
style='color:navy'>          &lt;/activatableServices&gt;</span></pre><pre><span
style='color:navy'>        &lt;/serviceManager&gt;</span></pre><pre><span
style='color:navy'>          &lt;securityManager&gt;</span></pre><pre><span
style='color:navy'>                &lt;receiverProfiles&gt;</span></pre><pre><span
style='color:navy'>                    &lt;anonymous&gt;</span></pre><pre><span
style='color:navy'>                        &lt;authentication mode=&quot;anonymous&quot;&gt;</span></pre><pre><span
style='color:navy'>                            &lt;anonymous/&gt;</span></pre><pre><span
style='color:navy'>                        &lt;/authentication&gt;</span></pre><pre><span
style='color:navy'>                        &lt;authorization mode=&quot;memoryMapping&quot;&gt;</span></pre><pre><span
style='color:navy'>                            &lt;memoryMapping fileName=&quot;#.security&quot; sectionName=&quot;authorizationData&quot; idName=&quot;mainAnonymousAuthorizationData&quot; /&gt;</span></pre><pre><span
style='color:navy'>                        &lt;/authorization&gt;</span></pre><pre><span
style='color:navy'>                        &lt;replyTokenAssertion&gt;</span></pre><pre><span
style='color:navy'>                            &lt;publicTokenAssertion&gt;</span></pre><pre><span
style='color:navy'>                               &lt;publicKeyClaim fileName=&quot;#.security&quot; sectionName=&quot;tokens&quot; idName=&quot;replySecurityPublicKey&quot; autoCreate=&quot;true&quot; /&gt;</span></pre><pre><span
style='color:navy'>                            &lt;/publicTokenAssertion&gt;</span></pre><pre><span
style='color:navy'>                        &lt;/replyTokenAssertion&gt;</span></pre><pre><span
style='color:navy'>                    &lt;/anonymous&gt;</span></pre><pre><span
style='color:navy'>                &lt;/receiverProfiles&gt;</span></pre><pre><span
style='color:navy'>                &lt;applicationSecurity&gt;</span></pre><pre><span
style='color:navy'>                    &lt;binding scope=&quot;StandardScope&quot; profile=&quot;anonymous&quot;/&gt;</span></pre><pre><span
style='color:navy'>                &lt;/applicationSecurity&gt;</span></pre><pre><span
style='color:navy'>            &lt;/securityManager&gt;</span></pre><pre><span
style='color:navy'>      &lt;/serviceEnvironment&gt;</span></pre><pre><span
style='color:navy'>    &lt;/serviceEnvironments&gt;</span></pre><pre><span
style='color:navy'>  &lt;/system.messagebus&gt;</span></pre><pre><span
style='color:navy'>&lt;/configuration&gt;</span></pre>

<p><span style='font-family:Arial'>The server loads the configuration
information but holds open the host by using the <strong><span
style='font-family:Arial'>Console.ReadLine </span></strong><strong><span
style='font-family:Arial;font-weight:normal'>method.</span></strong></span></p>

<pre><span style='color:#202080'>    </span></pre><pre><span style='color:#202080'>     ServiceEnvironment environs = ServiceEnvironment.Load(); </span></pre><pre><span
style='color:#202080'>     environs.Open(); </span></pre><pre><span
style='color:#202080'>     Console.WriteLine(&quot;Press enter to stop the services...&quot;); </span></pre><pre><span
style='color:#202080'>     Console.ReadLine(); environs.Close();</span></pre>

<p><strong><span style='font-family:Arial;color:black'>Service:</span></strong></p>

<p><span style='font-family:Arial'>The service itself is marked with the <strong><span
style='font-family:Arial'>DatagramPortTypeAttribute</span></strong> and the
methods are marked with the <strong><span style='font-family:Arial'>ServiceMethodAttribute</span></strong>.
Other than this, there is nothing special about the class.  In addition, the
example is marked with the <b>ServiceSecurityAttribute </b>attribute to
indicate that  the method is to be secured.  This establishes a security<b> </b>scope
such that all messages matching the scope must meet the specified security
criteria.  This example uses the <b>Name</b> property to define <i>StandardScope</i>
as the name of the security scope for this service.  The example also passes
the built-in value <b>mbse:Anonymous</b> user to the <b>Role</b> property that
defines which users are allowed to access the method.  The  <b>mbse:Anonymous</b>
value allows all anonymous users to access the service method.  Finally, the
example passes <b>false</b> to the <b>Confidentiality</b> property to disable
message body encryption.    </span></p>

<pre><span style='color:#202080'>&nbsp;</span></pre><pre><span
style='color:#202080'>    using System; </span></pre><pre><span
style='color:#202080'>    using System.MessageBus; </span></pre><pre><span
style='color:#202080'>    using System.MessageBus.Services; </span></pre><pre><span
style='color:#202080'>    </span></pre><pre><span style='color:#202080'>    [DatagramPortType(Name=&quot;Hello&quot;,Namespace=&quot;http://www.tempuri.org/quickstarts&quot;)] </span></pre><pre><span
style='color:#202080'>    public class Hello </span></pre><pre><span
style='color:#202080'>    { </span></pre><pre><span style='color:#202080'>         </span><span
style='color:navy'>[ServiceSecurityAttribute(Name = &quot;StandardScope&quot;, Role = &quot;mbse:AnonymousUser&quot;, Confidentiality = false)]</span></pre><pre><span
style='color:#202080'>        [ServiceMethodAttribute] </span></pre><pre><span
style='color:#202080'>        public string Greeting(string name) </span></pre><pre><span
style='color:#202080'>        { </span></pre><pre><span style='color:#202080'>            Console.WriteLine(&quot;Called by a client with the name {0}&quot;, name); </span></pre><pre><span
style='color:#202080'>            return String.Format(&quot;Hello, {0}!&quot;, name); </span></pre><pre><span
style='color:#202080'>        } </span></pre><pre><span style='color:#202080'>    }</span></pre><pre><span
style='color:#202080'>               </span></pre>

<h3><span style='font-family:Arial'>Building</span></h3>

<ol start=1 type=1>
 <li class=MsoNormal><a name="#Building"></a><span style='font-family:Arial'>Open
     the <b>Longhorn Build Environment</b> console window (click <b>Start</b>,
     click <b>All Programs</b>, click&nbsp;<b>Microsoft Longhorn SDK</b>, click
     <b>Open Build Environment Window</b>, and click <b>Longhorn Build
     Environment</b>).</span></li>
 <li class=MsoNormal><span style='font-family:Arial'>Navigate to the directory
     where this readme is located.</span></li>
 <li class=MsoNormal><span style='font-family:Arial'>Type <b>MSBuild</b>&nbsp;and
     press ENTER.</span></li>
</ol>

<h3><span style='font-family:Arial'>Running</span></h3>

<p><a name="#Running"></a><b><span style='font-family:Arial'>Running on a
single machine:</span></b><span style='font-family:Arial'><br>
To run the sample on a single machine, open a command prompt window in the
Server directory and another one in the Client directory. At the server command
prompt, type <strong><span style='font-family:Arial'>host </span></strong><strong><span
style='font-family:Arial;font-weight:normal'>to start the server application.
Then, </span></strong>at the client directory console prompt, type <strong><span
style='font-family:Arial'>client</span></strong><strong><span style='font-family:
Arial;font-weight:normal'> </span></strong><b>&lt;<em><span style='font-family:
Arial'>name</span></em>&gt; </b>to start the client application.</span></p>

<p><b><span style='font-family:Arial'>Running on multiple machines:</span></b><span
style='font-family:Arial'><br>
To run the sample on multiple machines, perform the following steps:</span></p>

<ol start=1 type=1>
 <li class=MsoNormal><span style='font-family:Arial'>On the server machine,
     edit the Host.exe.config file in the Server directory. Replace
     &quot;localhost&quot; with the server machine name. Then run the server
     application. </span></li>
 <li class=MsoNormal><span style='font-family:Arial'>On the client machine,
     edit the Client.cs file in the Client directory. In the URI that
     represents the server location, replace &quot;localhost&quot; with the
     server machine name. Recompile the client and rerun the client
     application. </span></li>
 <li class=MsoNormal><span style='font-family:Arial'>On the client machine,
     edit Client.exe.config.  Replace &quot;localhost&quot; in the <b>&lt;identityRole&gt;
     </b>element with the client machine name.</span></li>
</ol>

<p><b><span style='font-family:Arial'>Note:</span></b></p>

<p><span style='font-family:Arial'>If your computer is attached to a workgroup
but is not attached to a Microsoft Windows domain, this sample will fail unless
you modify your Machine.config file.&nbsp; For instructions, see</span> <span
style='font-family:Arial'>&quot;Enabling 'Indigo' Security&nbsp;within a
Workgroup&quot; in the Longhorn SDK readme</span>.</p>

<p>&nbsp;</p>

<p><span style='font-family:Arial'>&nbsp;</span></p>

</div>

</body>

</html>
