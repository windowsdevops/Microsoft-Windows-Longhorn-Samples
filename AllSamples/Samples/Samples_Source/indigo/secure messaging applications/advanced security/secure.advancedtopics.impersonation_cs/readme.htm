<html>
	

<head>
<meta http-equiv=Content-Type content="text/html; charset=windows-1252">
<meta name=Generator content="Microsoft Word 11 (filtered)">
<title>The Impersonation sample</title>
<style>
<!--
 /* Font Definitions */
 @font-face
	{font-family:SimSun;
	panose-1:2 1 6 0 3 1 1 1 1 1;}
@font-face
	{font-family:"\@SimSun";
	panose-1:2 1 6 0 3 1 1 1 1 1;}
 /* Style Definitions */
 p.MsoNormal, li.MsoNormal, div.MsoNormal
	{margin:0in;
	margin-bottom:.0001pt;
	font-size:12.0pt;
	font-family:"Times New Roman";}
h2
	{margin-right:0in;
	margin-left:0in;
	font-size:18.0pt;
	font-family:"Times New Roman";
	font-weight:bold;}
h3
	{margin-right:0in;
	margin-left:0in;
	font-size:13.5pt;
	font-family:"Times New Roman";
	font-weight:bold;}
p.MsoCommentText, li.MsoCommentText, div.MsoCommentText
	{margin:0in;
	margin-bottom:.0001pt;
	font-size:10.0pt;
	font-family:"Times New Roman";}
a:link, span.MsoHyperlink
	{color:blue;
	text-decoration:underline;}
a:visited, span.MsoHyperlinkFollowed
	{color:blue;
	text-decoration:underline;}
p
	{margin-right:0in;
	margin-left:0in;
	font-size:12.0pt;
	font-family:"Times New Roman";}
pre
	{margin:0in;
	margin-bottom:.0001pt;
	font-size:10.0pt;
	font-family:"Courier New";}
@page Section1
	{size:8.5in 11.0in;
	margin:1.0in 1.25in 1.0in 1.25in;}
div.Section1
	{page:Section1;}
 /* List Definitions */
 ol
	{margin-bottom:0in;}
ul
	{margin-bottom:0in;}
-->
</style>

</head>

	

<body lang=EN-US link=blue vlink=blue>

<div class=Section1>

<h2><span style='font-family:Arial'>The Impersonation Sample</span></h2>

<h3><span style='font-family:Arial'>"Indigo" - PDC Drop, October 2003</span></h3>

<h3><span style='font-family:Arial'>Contents</span></h3>

<p><span style='font-family:Arial'>This document contains the following
sections:<br>
&nbsp;&nbsp;&nbsp;<a href="#Overview">Overview</a><br>
&nbsp;&nbsp;&nbsp;<a href="#KeyConcepts">Key Concepts</a><br>
&nbsp;&nbsp;&nbsp;<a href="#Building">Building</a><br>
&nbsp;&nbsp;&nbsp;<a href="#Running">Running</a></span></p>

<h3><span style='font-family:Arial'>Overview</span></h3>

<p><a name="#Overview"></a><span style='font-family:Arial'>The "Longhorn" communications subsystem (code-named "Indigo") can be used to help secure applications. The Impersonation
sample is an application consisting of a client, a service, a
service host, and client and host configuration and data files. The sample uses
Windows (Kerberos) authentication to demonstrate impersonation of the client at
the service. The client is a console application that sends a message secured
using the current thread's Windows token to the server. The message body is a
simple string. The server is a console application that validates the Kerberos
token and formulates a response using the string from the message. The server
also impersonates the process identity of the client, prints out the principal
name to the console, and reverts. </span></p>

<h3><span style='font-family:Arial'>Key Concepts</span></h3>

<p><a name="#KeyConcepts"></a><b><span style='font-family:Arial'>Client:</span></b><span
style='font-family:Arial'><br>
The client is a simple console application that uses configuration to store its
settings for the objects that it uses.</span></p>

<pre><span style='color:#202080'>    </span></pre><pre><span style='color:#202080'>&lt;configuration&gt;</span></pre><pre><span
style='color:#202080'>  &lt;system.messagebus&gt;</span></pre><pre><span
style='color:#202080'>    &lt;serviceEnvironments&gt;</span></pre><pre><span
style='color:#202080'>      &lt;serviceEnvironment name=&quot;main&quot;&gt;</span></pre><pre><span
style='color:#202080'>        &lt;port&gt;</span></pre><pre><span
style='color:#202080'>            &lt;identityRole&gt;soap.tcp://localhost:46001/ImpersonationTestClient/&lt;/identityRole&gt;</span></pre><pre><span
style='color:#202080'>        &lt;/port&gt;</span></pre><pre><span
style='color:#202080'>        &lt;!-- WARNING: This sample does not secure the server policy for demonstration purposes. --&gt;</span></pre><pre><span
style='color:#202080'>        &lt;policyManager&gt;</span></pre><pre><span
style='color:#202080'>          &lt;!-- Permits untrusted policy statements. Default requires signed policy statements. --&gt;</span></pre><pre><span
style='color:#202080'>          &lt;areUntrustedPolicyAttachmentsAccepted&gt;true&lt;/areUntrustedPolicyAttachmentsAccepted&gt;</span></pre><pre><span
style='color:#202080'>          &lt;isPolicyReturned&gt;true&lt;/isPolicyReturned&gt;</span></pre><pre><span
style='color:#202080'>        &lt;/policyManager&gt;</span></pre><pre><span
style='color:#202080'>      &lt;/serviceEnvironment&gt;</span></pre><pre><span
style='color:#202080'>    &lt;/serviceEnvironments&gt;</span></pre><pre><span
style='color:#202080'>  &lt;/system.messagebus&gt;</span></pre><pre><span
style='color:#202080'>&lt;/configuration&gt;</span></pre>

<p><span style='font-family:Arial'>The client loads this configuration
information, uses the <b>ServiceManager</b> to create a proxy that represents a
service, and invokes the method on the proxy. Because this service method is an
RPC-style or request-reply style method, the execution of the client stops
until the call returns. </span></p>

<p><span style='font-family:Arial'>It is important to realize that, although
this client sends SOAP 1.2 messages to communicate with the service, you
interact with this service in your client as though it were a local call and
used no custom parameter types. Note that there is no explicit setting to
indicate the use of Windows credentials. The support for Windows credentials is
hidden in the Machine.config file and the use of the Windows token factory is
automatic, which makes client application development easier. (Note: the
Windows token formulated using a process token rather than the thread token of
the client). </span></p>

<pre style='margin-top:0in;margin-right:.5in;margin-bottom:0in;margin-left:
.5in;margin-bottom:.0001pt'><span style='color:#202080'>string name = &quot;Client&quot;;</span></pre><pre
style='margin-top:0in;margin-right:.5in;margin-bottom:0in;margin-left:.5in;
margin-bottom:.0001pt'><span style='color:#202080'>if (args.Length &gt; 0)</span></pre><pre
style='margin-top:0in;margin-right:.5in;margin-bottom:0in;margin-left:.5in;
margin-bottom:.0001pt'><span style='color:#202080'>name = args[0];</span></pre><pre
style='margin-top:0in;margin-right:.5in;margin-bottom:0in;margin-left:.5in;
margin-bottom:.0001pt'><span style='color:#202080'>&nbsp;</span></pre><pre
style='margin-top:0in;margin-right:.5in;margin-bottom:0in;margin-left:.5in;
margin-bottom:.0001pt'><span style='color:#202080'>// Load the default service environment, called &quot;main&quot;.</span></pre><pre
style='margin-top:0in;margin-right:.5in;margin-bottom:0in;margin-left:.5in;
margin-bottom:.0001pt'><span style='color:#202080'>ServiceEnvironment se = ServiceEnvironment.Load();</span></pre><pre
style='margin-top:0in;margin-right:.5in;margin-bottom:0in;margin-left:.5in;
margin-bottom:.0001pt'><span style='color:#202080'>&nbsp;</span></pre><pre
style='margin-top:0in;margin-right:.5in;margin-bottom:0in;margin-left:.5in;
margin-bottom:.0001pt'><span style='color:#202080'>// Retrieve the ServiceManager from the default environment.</span></pre><pre
style='margin-top:0in;margin-right:.5in;margin-bottom:0in;margin-left:.5in;
margin-bottom:.0001pt'><span style='color:#202080'>ServiceManager manager = se[typeof(ServiceManager)] as ServiceManager;</span></pre><pre
style='margin-top:0in;margin-right:.5in;margin-bottom:0in;margin-left:.5in;
margin-bottom:.0001pt'><span style='color:#202080'>if (manager == null)</span></pre><pre
style='margin-top:0in;margin-right:.5in;margin-bottom:0in;margin-left:.5in;
margin-bottom:.0001pt'><span style='color:#202080'>{</span></pre><pre
style='margin-top:0in;margin-right:.5in;margin-bottom:0in;margin-left:.5in;
margin-bottom:.0001pt'><span style='color:#202080'>  throw new ApplicationException(</span></pre><pre
style='margin-top:0in;margin-right:.5in;margin-bottom:0in;margin-left:.5in;
margin-bottom:.0001pt'><span style='color:#202080'>  &quot;The ServiceManager is not available in the service se.&quot;);</span></pre><pre
style='margin-top:0in;margin-right:.5in;margin-bottom:0in;margin-left:.5in;
margin-bottom:.0001pt'><span style='color:#202080'>}</span></pre><pre
style='margin-top:0in;margin-right:.5in;margin-bottom:0in;margin-left:.5in;
margin-bottom:.0001pt'><span style='color:#202080'>// Start the service environment.</span></pre><pre
style='margin-top:0in;margin-right:.5in;margin-bottom:0in;margin-left:.5in;
margin-bottom:.0001pt'><span style='color:#202080'>se.Open();</span></pre><pre
style='margin-top:0in;margin-right:.5in;margin-bottom:0in;margin-left:.5in;
margin-bottom:.0001pt'><span style='color:#202080'>&nbsp;</span></pre><pre
style='margin-top:0in;margin-right:.5in;margin-bottom:0in;margin-left:.5in;
margin-bottom:.0001pt'><span style='color:#202080'>// Create a proxy channel that points to the service to call.</span></pre><pre
style='margin-top:0in;margin-right:.5in;margin-bottom:0in;margin-left:.5in;
margin-bottom:.0001pt'><span style='color:#202080'>Uri uri = new Uri(&quot;soap.tcp://localhost:46000/ImpersonationTestService/&quot;);</span></pre><pre
style='margin-top:0in;margin-right:.5in;margin-bottom:0in;margin-left:.5in;
margin-bottom:.0001pt'><span style='color:#202080'>IHelloChannel channel = (IHelloChannel)manager.CreateChannel(typeof(IHelloChannel), uri);</span></pre><pre
style='margin-top:0in;margin-right:.5in;margin-bottom:0in;margin-left:.5in;
margin-bottom:.0001pt'><span style='color:#202080'>&nbsp;</span></pre><pre
style='margin-top:0in;margin-right:.5in;margin-bottom:0in;margin-left:.5in;
margin-bottom:.0001pt'><span style='color:#202080'>try </span></pre><pre
style='margin-top:0in;margin-right:.5in;margin-bottom:0in;margin-left:.5in;
margin-bottom:.0001pt'><span style='color:#202080'>{</span></pre><pre
style='margin-top:0in;margin-right:.5in;margin-bottom:0in;margin-left:.5in;
margin-bottom:.0001pt'><span style='color:#202080'>  ResponseMessage response = channel.DoTest(new StartMessage(name));</span></pre><pre
style='margin-top:0in;margin-right:.5in;margin-bottom:0in;margin-left:.5in;
margin-bottom:.0001pt'><span style='color:#202080'>  Console.WriteLine(response.Response);</span></pre><pre
style='margin-top:0in;margin-right:.5in;margin-bottom:0in;margin-left:.5in;
margin-bottom:.0001pt'><span style='color:#202080'>}</span></pre><pre
style='margin-top:0in;margin-right:.5in;margin-bottom:0in;margin-left:.5in;
margin-bottom:.0001pt'><span style='color:#202080'>catch(Exception Ex)</span></pre><pre
style='margin-top:0in;margin-right:.5in;margin-bottom:0in;margin-left:.5in;
margin-bottom:.0001pt'><span style='color:#202080'>{</span></pre><pre
style='margin-top:0in;margin-right:.5in;margin-bottom:0in;margin-left:.5in;
margin-bottom:.0001pt'><span style='color:#202080'>  Console.WriteLine(Ex);</span></pre><pre
style='margin-top:0in;margin-right:.5in;margin-bottom:0in;margin-left:.5in;
margin-bottom:.0001pt'><span style='color:#202080'>}</span></pre><pre
style='margin-top:0in;margin-right:.5in;margin-bottom:0in;margin-left:.5in;
margin-bottom:.0001pt'><span style='color:#202080'>finally</span></pre><pre
style='margin-top:0in;margin-right:.5in;margin-bottom:0in;margin-left:.5in;
margin-bottom:.0001pt'><span style='color:#202080'>{</span></pre><pre
style='margin-top:0in;margin-right:.5in;margin-bottom:0in;margin-left:.5in;
margin-bottom:.0001pt'><span style='color:#202080'>  se.Close();</span></pre><pre
style='margin-top:0in;margin-right:.5in;margin-bottom:0in;margin-left:.5in;
margin-bottom:.0001pt'><span style='color:#202080'>}</span></pre>

<p><span style='font-family:Arial'>&nbsp;</span></p>

<p><b><span style='font-family:Arial'>Securing the Service in Three Steps</span></b></p>

<p><strong><span style='font-family:Arial;color:black'>1. Service</span></strong></p>

<p><span style='font-family:Arial'>The service itself is marked with the <strong><span
style='font-family:Arial'>DatagramPortTypeAttribute</span></strong> and the
methods are marked with the <strong><span style='font-family:Arial'>ServiceMethodAttribute</span></strong>.
In addition, a new <b>[ServiceSecurity()]</b> attribute is added to indicate
that the DoTest method on this class should be secured. This establishes a security
scope such that all messages matching the scope will require the constraints
established in the configuration file (step 2). By default, this security scope
is bound to a default profile that specifies the use of Windows authentication.
This means that all the users in the current domain will be allowed to access
this method. (By the time the DoTest method is invoked, all relevant
authentication and access checking for <b>mbse:AuthenticatedUser</b> has been
performed.) Other than this, there is nothing special about the class or
securing the method at development time.</span></p>

<pre><span style='color:#202080'> [DatagramPortType(Name=&quot;ImpersonationTest&quot;, Namespace=&quot;http://www.tempuri.org/quickstarts&quot;)]</span></pre><pre><span
style='color:#202080'>    public class Hello </span></pre><pre><span
style='color:#202080'>    { </span></pre><pre><span style='color:#202080'>        [ServiceMethod] </span></pre><pre><b><span
style='font-size:12.0pt;color:#202080'>      [ServiceSecurity(Name=&quot;DoTest&quot;, Confidentiality=false, Role=&quot;mbse:AuthenticatedUser&quot;)]</span></b></pre><pre><span
style='color:#202080'>&nbsp;</span></pre><pre><span style='color:#202080'>        public ResponseMessage DoTest(StartMessage message)</span></pre><pre><span
style='color:#202080'>        { </span></pre><pre><span style='color:#202080'>            Console.WriteLine(&quot;Called by client {0}.&quot;, message.Name);</span></pre><pre><span
style='color:#202080'>&nbsp;</span></pre><pre><span style='color:#202080'>            TestImpersonation(message.ImpersonationToken);</span></pre><pre><span
style='color:#202080'>&nbsp;</span></pre><pre><span style='color:#202080'>            ResponseMessage response = new ResponseMessage(String.Format(&quot;Impersonation test complete for client {0}&quot;, message.Name));</span></pre><pre><span
style='color:#202080'>             return response;</span></pre><pre><span
style='color:#202080'>        } </span></pre><pre><span style='color:#202080'>        internal void TestImpersonation(IImpersonationToken token)</span></pre><pre><span
style='color:#202080'>        {</span></pre><pre><span style='color:#202080'>        if (token == null || !token.CanImpersonate)</span></pre><pre><span
style='color:#202080'>        {</span></pre><pre><span style='color:#202080'>        Console.WriteLine(&quot;Token cannot perform impersonation.&quot;);</span></pre><pre><span
style='color:#202080'>        return;</span></pre><pre><span style='color:#202080'>        }</span></pre><pre><span
style='color:#202080'>&nbsp;</span></pre><pre><span style='color:#202080'>        Console.WriteLine(&quot;Testing impersonation.&quot;);</span></pre><pre><span
style='color:#202080'>        Console.WriteLine(&quot;Identity is: {0}.&quot;, WindowsIdentity.GetCurrent().Name);</span></pre><pre><span
style='color:#202080'>        </span></pre><pre><span style='color:#202080'>        Console.WriteLine(&quot;Starting impersonation.&quot;);</span></pre><pre><span
style='color:#202080'>        token.StartImpersonation();</span></pre><pre><span
style='color:#202080'>        Console.WriteLine(&quot;Identity is: {0}.&quot;, WindowsIdentity.GetCurrent().Name);</span></pre><pre><span
style='color:#202080'>&nbsp;</span></pre><pre><span style='color:#202080'>        Console.WriteLine(&quot;Stopping impersonation.&quot;);</span></pre><pre><span
style='color:#202080'>        token.StopImpersonation();</span></pre><pre><span
style='color:#202080'>        Console.WriteLine(&quot;Identity is: {0}.&quot;, WindowsIdentity.GetCurrent().Name);</span></pre><pre><span
style='color:#202080'>        }</span></pre><pre><span style='color:#202080'>    }</span></pre>

<p><span style='font-family:Arial'>The TestImpersonation method uses the token
to start and stop impersonation. The token for this method is obtained by
querying the headers for the <b>SignatureTokenProperty</b> and finding a token
that supports impersonation as shown in the following code.</span></p>

<p><span style='font-family:Arial'>&nbsp;</span></p>

<p><span style='font-family:Arial'>&nbsp;</span><span style='font-size:10.0pt;
font-family:"Courier New";color:navy'>public IImpersonationToken
ImpersonationToken<br>
{<br>
&nbsp;&nbsp;&nbsp; get<br>
&nbsp;&nbsp;&nbsp; {<br>
&nbsp;&nbsp;&nbsp; MessageHeader[] props = this.Headers.FindMultiple(typeof(SignatureTokenProperty));<br>
&nbsp;&nbsp;&nbsp; foreach (SignatureTokenProperty stp in props) <br>
&nbsp;&nbsp;&nbsp; {<br>
&nbsp;&nbsp;&nbsp; IToken token = stp.Token;<br>
<br>
&nbsp;&nbsp;&nbsp; if (token is DerivedKeyToken)<br>
&nbsp;&nbsp;&nbsp; {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; token =
((DerivedKeyToken)token).InnerToken;<br>
&nbsp;&nbsp;&nbsp; }<br>
<br>
&nbsp;&nbsp;&nbsp; if (token is IImpersonationToken)<br>
&nbsp;&nbsp;&nbsp; {<br>
&nbsp;&nbsp;&nbsp; return (IImpersonationToken)token;<br>
&nbsp;&nbsp;&nbsp; }<br>
&nbsp;&nbsp;&nbsp; }<br>
<br>
&nbsp;&nbsp;&nbsp; return null;<br>
&nbsp;&nbsp;&nbsp; }<br>
}</span></p>

<p><b><span style='font-family:Arial'>2. Host</span></b><span style='font-family:
Arial'><br>
The host application configures "Indigo" to listen for incoming messages for
the services listed in the <b>&lt;activatableServices&gt;</b> element. In
addition, the host application specifies the use of a Windows&nbsp; profile for
binding to the scope </span></p>

<pre><span style='color:#202080'>&lt;configuration&gt;</span></pre><pre><span
style='color:#202080'>  &lt;system.messagebus&gt;</span></pre><pre><span
style='color:#202080'>    &lt;serviceEnvironments&gt;</span></pre><pre><span
style='color:#202080'>      &lt;serviceEnvironment name=&quot;main&quot;&gt;</span></pre><pre><span
style='color:#202080'>        &lt;port&gt;</span></pre><pre><span
style='color:#202080'>          &lt;identityRole&gt;soap.tcp://localhost:46000/ImpersonationTestService/&lt;/identityRole&gt;</span></pre><pre><span
style='color:#202080'>        &lt;/port&gt;</span></pre><pre><b><span
style='color:#202080'>        &lt;!-- Bind the scope defined using ServiceSecurity Attribute to a profile that uses Windows authentication using SSPI. --&gt;</span></b></pre><pre><b><span
style='color:#202080'>        &lt;securityManager&gt;</span></b></pre><pre><b><span
style='color:#202080'>               &lt;applicationSecurity&gt;</span></b></pre><pre><b><span
style='color:#202080'>                       &lt;binding scope=&quot;DoTest&quot; profile=&quot;windowsUsingSspi&quot; /&gt;</span></b></pre><pre><b><span
style='color:#202080'>               &lt;/applicationSecurity&gt;</span></b></pre><pre><b><span
style='color:#202080'>        &lt;/securityManager&gt;</span></b></pre><pre><span
style='color:#202080'>        &lt;!-- WARNING: Policy is not secured to clarify demonstration. --&gt;</span></pre><pre><span
style='color:#202080'>        &lt;policyManager&gt;</span></pre><pre><span
style='color:#202080'>          &lt;!-- Permits unsigned policy statements. Default requires signed policy statements. --&gt;</span></pre><pre><span
style='color:#202080'>          &lt;areUntrustedPolicyAttachmentsAccepted&gt;true&lt;/areUntrustedPolicyAttachmentsAccepted&gt;</span></pre><pre><span
style='color:#202080'>          &lt;isPolicyReturned&gt;true&lt;/isPolicyReturned&gt;</span></pre><pre><span
style='color:#202080'>        &lt;/policyManager&gt;</span></pre><pre><span
style='color:#202080'>        &lt;serviceManager&gt;</span></pre><pre><span
style='color:#202080'>          &lt;activatableServices&gt;</span></pre><pre><span
style='color:#202080'>            &lt;add type=&quot;Microsoft.MessageBus.QuickStarts.ImpersonationTest, ImpersonationTest&quot; /&gt;</span></pre><pre><span
style='color:#202080'>          &lt;/activatableServices&gt;</span></pre><pre><span
style='color:#202080'>        &lt;/serviceManager&gt;</span></pre><pre><span
style='color:#202080'>      &lt;/serviceEnvironment&gt;</span></pre><pre><span
style='color:#202080'>    &lt;/serviceEnvironments&gt;</span></pre><pre><span
style='color:#202080'>  &lt;/system.messagebus&gt;</span></pre><pre><span
style='color:#202080'>&lt;/configuration&gt;</span></pre>

<p><span style='font-family:Arial'>&nbsp;</span></p>

<p><b><span style='font-family:Arial'>3. Data file</span></b><span
style='font-family:Arial'><br>
This sample does not require a security data file. </span><span
style='font-size:10.0pt;font-family:"Courier New"'><br>
&nbsp;</span></p>

<h3><span style='font-family:Arial'>Building</span></h3>

<ol start=1 type=1>
 <li class=MsoNormal><a name="#Building"></a><span style='font-family:Arial'>Open
     the <b>Longhorn Build Environment</b> console window (click <b>Start</b>,
     click <b>All Programs</b>, click&nbsp;<b>Microsoft Longhorn SDK</b>, click
     <b>Open Build Environment Window</b>, and click <b>Longhorn Build Environment</b>).</span></li>
 <li class=MsoNormal><span style='font-family:Arial'>Navigate to the directory
     where this readme is located.</span></li>
 <li class=MsoNormal><span style='font-family:Arial'>Type <b>MSBuild</b>&nbsp;and
     press ENTER.</span></li>
</ol>

<h3><span style='font-family:Arial'>Running</span></h3>

<p><a name="#Running"></a><b><span style='font-family:Arial'>Running on a
single machine:</span></b><span style='font-family:Arial'><br>
To run the sample on a single machine, open a command prompt window in the
Server directory and another one in the Client directory. At the server command
prompt, type <strong><span style='font-family:Arial'>host</span></strong><strong><span
style='font-family:Arial;font-weight:normal'> to start the server application</span></strong>.
Then, at the client directory command prompt, type <strong><span
style='font-family:Arial'>client </span></strong><b><i>&lt;name&gt; </i></b>to
start the client application.</span></p>

<p><b><span style='font-family:Arial'>Running on multiple machines:</span></b><span
style='font-family:Arial'><br>
To run the sample on multiple machines, perform the following steps:</span></p>

<ol start=1 type=1>
 <li class=MsoNormal><span style='font-family:Arial'>On the server machine,
     edit the Host.exe.config file in the Server directory. Replace
     &quot;localhost&quot; with the server machine name. Then run the server
     application. </span></li>
 <li class=MsoNormal><span style='font-family:Arial'>On the client machine,
     edit the Client.cs file in the Client directory. In the URI that
     represents the server location, replace &quot;localhost&quot; with the
     server machine name. Recompile the client and rerun the client
     application. </span></li>
 <li class=MsoNormal><span style='font-family:Arial'>On the client machine,
     edit Client.exe.config.  Replace &quot;localhost&quot; in the <b>&lt;identityRole&gt;
     </b>element with the client machine name.</span></li>
</ol>

<p><b><span style='font-family:Arial'>Note:</span></b></p>

<p><span style='font-family:Arial'>To run this sample, your computer must be
attached to a Microsoft Windows domain.&nbsp; If your computer is attached only
to a workgroup, this sample will fail.</span>&nbsp; </p>

<p>&nbsp;</p>

<p><span style='font-family:Arial'>&nbsp;</span></p>

</div>

</body>

</html>
