<html>
	

<head>
<meta http-equiv=Content-Type content="text/html; charset=windows-1252">
<meta name=Generator content="Microsoft Word 11 (filtered)">
<title>BasicPasswordConfigRequestReply</title>
<style>
<!--
 /* Font Definitions */
 @font-face
	{font-family:Courier;
	panose-1:2 7 4 9 2 2 5 2 4 4;}
@font-face
	{font-family:SimSun;
	panose-1:2 1 6 0 3 1 1 1 1 1;}
@font-face
	{font-family:"\@SimSun";
	panose-1:2 1 6 0 3 1 1 1 1 1;}
 /* Style Definitions */
 p.MsoNormal, li.MsoNormal, div.MsoNormal
	{margin:0in;
	margin-bottom:.0001pt;
	font-size:12.0pt;
	font-family:"Times New Roman";}
h2
	{margin-right:0in;
	margin-left:0in;
	font-size:18.0pt;
	font-family:"Times New Roman";
	font-weight:bold;}
h3
	{margin-right:0in;
	margin-left:0in;
	font-size:13.5pt;
	font-family:"Times New Roman";
	font-weight:bold;}
p.MsoCommentText, li.MsoCommentText, div.MsoCommentText
	{margin:0in;
	margin-bottom:.0001pt;
	font-size:10.0pt;
	font-family:"Times New Roman";}
a:link, span.MsoHyperlink
	{color:blue;
	text-decoration:underline;}
a:visited, span.MsoHyperlinkFollowed
	{color:blue;
	text-decoration:underline;}
p
	{margin-right:0in;
	margin-left:0in;
	font-size:12.0pt;
	font-family:"Times New Roman";}
pre
	{margin:0in;
	margin-bottom:.0001pt;
	font-size:10.0pt;
	font-family:"Courier New";}
@page Section1
	{size:8.5in 11.0in;
	margin:1.0in 1.25in 1.0in 1.25in;}
div.Section1
	{page:Section1;}
 /* List Definitions */
 ol
	{margin-bottom:0in;}
ul
	{margin-bottom:0in;}
-->
</style>

</head>

	

<body lang=EN-US link=blue vlink=blue>

<div class=Section1>

<h2><span style='font-family:Arial'>The BasicPasswordConfigRequestReply Sample</span></h2>

<h3><span style='font-family:Arial'>"Indigo" - PDC Drop, October 2003</span></h3>

<h3><span style='font-family:Arial'>Contents</span></h3>

<p><span style='font-family:Arial'>This document contains the following
sections:<br>
&nbsp;&nbsp;&nbsp;<a href="#Overview">Overview</a><br>
&nbsp;&nbsp;&nbsp;<a href="#KeyConcepts">Key Concepts</a><br>
&nbsp;&nbsp;&nbsp;<a href="#Building">Building</a><br>
&nbsp;&nbsp;&nbsp;<a href="#Running">Running</a></span></p>

<h3><span style='font-family:Arial'>Overview</span></h3>

<p><a name="#Overview"></a><span style='font-family:Arial'>The "Longhorn" communications subsystem (code-named "Indigo") can be used to help secure applications. The
BasicPasswordConfigRequestReply sample is a basic application
consisting of a client, a service, a service host, and client and host
configuration files and implementing  file-based user name and password
security. The client provides user name and password data in a configuration
data file. The server validates that the user name and password are valid by
comparing them with  the data stored in a configuration file on the server. The
client is a console application that sends  the user name string to the server
and writes the response from the server to the console. The server is a console
application that validates that the user has the correct password and
formulates a response using the user name in the message body. </span></p>

<h3><span style='font-family:Arial'>Key Concepts</span></h3>

<p><a name="#KeyConcepts"></a><b><span style='font-family:Arial'>Client:</span></b><span
style='font-family:Arial'><br>
The client is a simple console application that uses a configuration file to
store settings for the objects that it uses.</span></p>

<pre><span style='color:#202080'>    </span></pre><pre><span style='color:#202080'>&lt;configuration&gt;</span></pre><pre><span
style='color:#202080'>  &lt;system.messagebus&gt;</span></pre><pre><span
style='color:#202080'>    &lt;serviceEnvironments&gt;</span></pre><pre><span
style='color:#202080'>      &lt;serviceEnvironment name=&quot;main&quot;&gt;</span></pre><pre><span
style='color:#202080'>        &lt;port&gt;</span></pre><pre><span
style='color:#202080'>            &lt;identityRole&gt;soap.tcp://localhost:46001/HelloClient/&lt;/identityRole&gt;</span></pre><pre><span
style='color:#202080'>        &lt;/port&gt;</span></pre><pre><span
style='color:#202080'>        &lt;!-- WARNING: This sample does not secure the server policy for demonstration purposes. --&gt;</span></pre><pre><span
style='color:#202080'>        &lt;policyManager&gt;</span></pre><pre><span
style='color:#202080'>          &lt;!-- Permits untrusted policy statements. Default requires signed policy statements. --&gt;</span></pre><pre><span
style='color:#202080'>          &lt;areUntrustedPolicyAttachmentsAccepted&gt;true&lt;/areUntrustedPolicyAttachmentsAccepted&gt;</span></pre><pre><span
style='color:#202080'>          &lt;isPolicyReturned&gt;true&lt;/isPolicyReturned&gt;</span></pre><pre><span
style='color:#202080'>        &lt;/policyManager&gt;</span></pre><pre><span
style='color:#202080'>      &lt;/serviceEnvironment&gt;</span></pre><pre><span
style='color:#202080'>    &lt;/serviceEnvironments&gt;</span></pre><pre><span
style='color:#202080'>  &lt;/system.messagebus&gt;</span></pre><pre><span
style='color:#202080'>&lt;/configuration&gt;</span></pre><pre><span
style='color:#202080'>&nbsp;</span></pre>

<p><span style='font-family:Arial'>Because the client uses the &quot;main&quot;
service environment, it inherits all the security settings of this environment.
This includes the location of the data file containing the user name and
password information (Client.exe.config). The Machine.config file references
Client.exe.config and  Client.exe.security. The client loads this configuration
information, uses the service manager to create a proxy that represents a
service, and invokes the method on the proxy. Because this service method is an
RPC-style or request-reply style method, the execution of the client stops
until the call returns. The security data file for the client is as follows:</span></p>

<p><span style='font-size:10.0pt;font-family:"Courier New";color:navy'>&lt;securityData&gt;<br>
&nbsp;&nbsp;&nbsp; &lt;tokens&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;tokenCache
id=&quot;mainTokenCache&quot;&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&lt;userNameToken user=&quot;caliban&quot; password=&quot;wprt&quot;/&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/tokenCache&gt;<br>
&nbsp;&nbsp;&nbsp; &lt;/tokens&gt;<br>
&lt;/securityData&gt;</span></p>

<p><span style='font-family:Arial'>As this configuration example shows, the
tokens to be used in this application are populated into a token cache. In this
case, the token  is a userNameToken with instance data of </span><span
style='font-family:Courier'>user=&quot;caliban&quot;</span><span
style='font-family:Arial'> and </span><span style='font-family:Courier'>password=&quot;wprt&quot;</span><span
style='font-family:Arial'>. Typically, this information would be encrypted. </span></p>

<p><span style='font-family:Arial'>It is important to realize that although
this client sends SOAP 1.2 messages to communicate with the service, you
interact with this service in your client as though it were a local call and
used no custom parameter types. It is also important to note that in this case,
the client code has not changed for the secure implementation. </span></p>

<pre><span style='color:#202080'>   </span></pre><pre><span style='color:#202080'>    // Load the default service environment, called &quot;main&quot;.</span></pre><pre><span
style='color:#202080'>    ServiceEnvironment se = ServiceEnvironment.Load();</span></pre><pre><span
style='color:#202080'>&nbsp;</span></pre><pre><span style='color:#202080'>    // Retrieve the ServiceManager object from the default environment.</span></pre><pre><span
style='color:#202080'>    ServiceManager manager = se[typeof(ServiceManager)] as ServiceManager;</span></pre><pre><span
style='color:#202080'>    if (manager == null)</span></pre><pre><span
style='color:#202080'>    {</span></pre><pre><span style='color:#202080'>        throw new ApplicationException</span></pre><pre><span
style='color:#202080'>        (</span></pre><pre><span style='color:#202080'>            &quot;The service manager is not available in the service se.&quot; </span></pre><pre><span
style='color:#202080'>        );</span></pre><pre><span style='color:#202080'>    }</span></pre><pre><span
style='color:#202080'>&nbsp;</span></pre><pre><span style='color:#202080'>    // Start the service environment.</span></pre><pre><span
style='color:#202080'>    se.Open();</span></pre><pre><span style='color:#202080'>&nbsp;</span></pre><pre><span
style='color:#202080'>    // Create a proxy channel that points to the service to call.</span></pre><pre><span
style='color:#202080'>    Uri uri = new Uri(&quot;soap.tcp://localhost:46000/HelloService/&quot;);</span></pre><pre><span
style='color:#202080'>    IHelloChannel channel = (IHelloChannel)manager.CreateChannel(typeof(IHelloChannel), uri);</span></pre><pre><span
style='color:#202080'>&nbsp;</span></pre><pre><span style='color:#202080'>    try </span></pre><pre><span
style='color:#202080'>    {</span></pre><pre><span style='color:#202080'>        Console.WriteLine(channel.Greeting(name));</span></pre><pre><span
style='color:#202080'>    }</span></pre><pre><span style='color:#202080'>    catch(Exception Ex)</span></pre><pre><span
style='color:#202080'>    {</span></pre><pre><span style='color:#202080'>        Console.WriteLine(Ex);</span></pre><pre><span
style='color:#202080'>    }</span></pre><pre><span style='color:#202080'>    finally</span></pre><pre><span
style='color:#202080'>    {</span></pre><pre><span style='color:#202080'>        se.Close();</span></pre><pre><span
style='color:#202080'>    }</span></pre>

<p><b><span style='font-family:Arial'>Securing the service in three steps:</span></b></p>

<p><strong><span style='font-family:Arial;color:black'>1. Service:</span></strong></p>

<p><span style='font-family:Arial'>The service itself is marked with the <strong><span
style='font-family:Arial'>DatagramPortTypeAttribute</span></strong> and the
methods are marked with the <strong><span style='font-family:Arial'>ServiceMethodAttribute</span></strong><strong><span
style='font-family:Arial;font-weight:normal'>.</span></strong><b> </b>In
addition, the service has a new attribute, named <b>ServiceSecurity()</b>, that
indicates that the method is to be secured. This establishes a security scope
such that all messages matching the scope will require the constraints
established in the configuration file.  In this sample, the scope is named </span><span
style='font-family:Courier'>StandardScope</span><span style='font-family:Arial'>
and only appropriately scoped messages that have been mapped to the
StandardUserRole role are allowed access to the </span><span style='font-family:
Courier'>Greeting</span><span style='font-family:Arial'> method. (By the time
the </span><span style='font-family:Courier'>Greeting</span><span
style='font-family:Arial'> method is invoked, all relevant authentication,
authorization, and access checking has been performed). </span></p>

<pre><span style='color:#202080'>&nbsp;</span></pre><pre><span
style='color:#202080'>    using System; </span></pre><pre><span
style='color:#202080'>    using System.MessageBus; </span></pre><pre><span
style='color:#202080'>    using System.MessageBus.Services; </span></pre><pre><span
style='color:#202080'>    </span></pre><pre><span style='color:#202080'>&nbsp;</span></pre><pre><b><span
style='font-size:12.0pt;color:#202080'>   </span></b></pre><pre><span
style='color:#202080'>    [DatagramPortType(Name=&quot;Hello&quot;,Namespace=&quot;http://www.tempuri.org/quickstarts&quot;)] </span></pre><pre><span
style='color:#202080'>    public class Hello </span></pre><pre><span
style='color:#202080'>    { </span></pre><pre>&nbsp;</pre><pre><span
style='color:#202080'>        </span><b><span style='font-size:12.0pt;
color:navy'>[ServiceSecurity(Name= &quot;StandardScope &quot;, Role = &quot;StandardUserRole&quot;)]</span></b></pre><pre><span
style='color:#202080'>        [ServiceMethod] </span></pre><pre><span
style='color:#202080'>        public string Greeting(string name) </span></pre><pre><span
style='color:#202080'>        { </span></pre><pre><span style='color:#202080'>            Console.WriteLine(&quot;Called by a client with the name {0}&quot;, name); </span></pre><pre><span
style='color:#202080'>            return String.Format(&quot;Hello, {0}!&quot;, name); </span></pre><pre><span
style='color:#202080'>        } </span></pre><pre><span style='color:#202080'>    }</span></pre>

<p><span style='font-family:Arial'>&nbsp;</span></p>

<p><b><span style='font-family:Arial'>2. Host:</span></b><span
style='font-family:Arial'><br>
The host application configures "Indigo" to listen for incoming messages for
the services listed in the <b>&lt;activatableServices&gt;</b> element. In
addition, the host application specifies the userNamePassword profile as the
profile to be used for binding to the standard scope. The </span><span
style='font-family:Courier'>HelloService</span><span style='font-family:Arial'>
method code defines the <i>standardscope</i> scope using the <b>ServiceSecurityAttribute</b>.</span></p>

<p><span style='font-family:Arial'>&nbsp;</span></p>

<pre><span style='color:#202080'>&nbsp;</span></pre><pre><span
style='color:#202080'>&lt;configuration&gt;</span></pre><pre><span
style='color:#202080'>  &lt;system.messagebus&gt;</span></pre><pre><span
style='color:#202080'>    &lt;serviceEnvironments&gt;</span></pre><pre><span
style='color:#202080'>      &lt;serviceEnvironment name=&quot;main&quot;&gt;</span></pre><pre><span
style='color:#202080'>        &lt;port&gt;</span></pre><pre><span
style='color:#202080'>          &lt;identityRole&gt;soap.tcp://localhost:46000/HelloService/&lt;/identityRole&gt;</span></pre><pre><span
style='color:#202080'>        &lt;/port&gt;</span></pre><pre><span
style='color:#202080'>        &lt;securityManager&gt;</span></pre><pre><span
style='color:#202080'>               &lt;applicationSecurity&gt;</span></pre><pre><span
style='color:#202080'>                       &lt;binding scope=&quot;StandardScope &quot; profile=&quot;userNamePassword&quot; /&gt;</span></pre><pre><span
style='color:#202080'>               &lt;/applicationSecurity&gt;</span></pre><pre><span
style='color:#202080'>        &lt;/securityManager&gt;</span></pre><pre><span
style='color:#202080'>        &lt;!-- WARNING: Policy is not secured to clarify demonstration. --&gt;</span></pre><pre><span
style='color:#202080'>        &lt;policyManager&gt;</span></pre><pre><span
style='color:#202080'>          &lt;!-- Permits unsigned policy statements. The default requires signed policy statements. --&gt;</span></pre><pre><span
style='color:#202080'>          &lt;areUntrustedPolicyAttachmentsAccepted&gt;true&lt;/areUntrustedPolicyAttachmentsAccepted&gt;</span></pre><pre><span
style='color:#202080'>          &lt;isPolicyReturned&gt;true&lt;/isPolicyReturned&gt;</span></pre><pre><span
style='color:#202080'>        &lt;/policyManager&gt;</span></pre><pre><span
style='color:#202080'>        &lt;serviceManager&gt;</span></pre><pre><span
style='color:#202080'>          &lt;activatableServices&gt;</span></pre><pre><span
style='color:#202080'>            &lt;add type=&quot;Hello, HelloService&quot; /&gt;</span></pre><pre><span
style='color:#202080'>          &lt;/activatableServices&gt;</span></pre><pre><span
style='color:#202080'>        &lt;/serviceManager&gt;</span></pre><pre><span
style='color:#202080'>      &lt;/serviceEnvironment&gt;</span></pre><pre><span
style='color:#202080'>    &lt;/serviceEnvironments&gt;</span></pre><pre><span
style='color:#202080'>  &lt;/system.messagebus&gt;</span></pre><pre><span
style='color:#202080'>&lt;/configuration&gt;</span></pre>

<p><span style='font-family:Arial'>&nbsp;</span></p>

<p><span style='font-family:Arial'>The host does not change for this sample. </span></p>

<p><b><span style='font-family:Arial'>3. Data file:</span></b><span
style='font-family:Arial'><br>
Finally, you need to store the authorization data and user name and password
data.  In this sample, the security data file that contains this information is
located in the same directory as the Host.exe file and is named
Host.exe.security. The contents of this file are shown below:</span></p>

<p><span style='font-size:10.0pt;font-family:"Courier New";color:#202080'>&lt;securityData&gt;<br>
&nbsp;&nbsp;&nbsp; &lt;credentials&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;username
id=&quot;mainUsers&quot; nonceLength=&quot;24&quot;&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&lt;memoryPasswordResolver&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&lt;add user=&quot;caliban&quot; password=&quot;wprt&quot; /&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&lt;/memoryPasswordResolver&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/username&gt;<br>
&nbsp;&nbsp;&nbsp; &lt;/credentials&gt;<br>
&nbsp;&nbsp;&nbsp; &lt;authorizationData&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;memoryMapping
id=&quot;mainAuthorizationData&quot;&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&lt;globalEntries&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&lt;userNameRoleAssignment user = &quot;caliban&quot; roles =
&quot;StandardUserRole&quot;/&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&lt;/globalEntries&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/memoryMapping&gt;<br>
&nbsp;&nbsp;&nbsp; &lt;/authorizationData&gt;<br>
&lt;/securityData&gt;</span></p>

<p><span style='color:#202080'>&nbsp;</span></p>

<h3><span style='font-size:12.0pt;font-family:Arial;font-weight:normal'>Typically, 
the user information would be encrypted. However, the current version of
"Indigo" provides a simple </span><span style='font-size:12.0pt;font-family:
Arial'>MemoryPasswordResolver</span><span class=MsoCommentReference><span
style='font-size:8.0pt;display:none;font-weight:normal'> </span></span><span
style='font-size:12.0pt;font-family:Arial;font-weight:normal'>class  for
specifying username data. Password resolvers provide extensibility points for
applications that use data in other stores. </span></h3>

<h3><span style='font-family:Arial'>Building</span></h3>

<ol start=1 type=1>
 <li class=MsoNormal><a name="#Building"></a><span style='font-family:Arial'>Open
     the <b>Longhorn Build Environment</b> console window (click <b>Start</b>,
     click <b>All Programs</b>, click&nbsp;<b>Microsoft Longhorn SDK</b>, click
     <b>Open Build Environment Window</b>, and click <b>Longhorn Build
     Environment</b>).</span></li>
 <li class=MsoNormal><span style='font-family:Arial'>Navigate to the directory
     where this readme is located.</span></li>
 <li class=MsoNormal><span style='font-family:Arial'>Type <b>MSBuild</b>&nbsp;and
     press ENTER.</span></li>
</ol>

<h3><span style='font-family:Arial'>Running</span></h3>

<p><a name="#Running"></a><b><span style='font-family:Arial'>Running on a
single machine:</span></b><span style='font-family:Arial'><br>
To run the sample on a single machine, open a command prompt window in the
Server directory and another one in the Client directory. At the server command
prompt, type <strong><span style='font-family:Arial'>host </span></strong><strong><span
style='font-family:Arial;font-weight:normal'>to start the server application.
Then</span></strong>, at the client command prompt, type <strong><span
style='font-family:Arial'>client</span></strong><strong><span style='font-family:
Arial;font-weight:normal'> </span></strong><b>&lt;<em><span style='font-family:
Arial'>name</span></em>&gt; </b>to start the client application. <b>Running on
multiple machines:</b><br>
To run the sample on multiple machines, perform the following steps:</span></p>

<ol start=1 type=1>
 <li class=MsoNormal><span style='font-family:Arial'>On the server machine,
     edit the Host.exe.config file in the Server directory. Replace &quot;localhost&quot;
     with the server machine name. Then run the server application. </span></li>
 <li class=MsoNormal><span style='font-family:Arial'>On the client machine,
     edit the Client.cs file in the Client directory. In the URI that
     represents the server location, replace &quot;localhost&quot; with the
     server machine name. Recompile the client and rerun the client
     application. </span></li>
 <li class=MsoNormal><span style='font-family:Arial'>On the client machine,
     edit Client.exe.config.  Replace &quot;localhost&quot; in the <b>&lt;identityRole&gt;
     </b>element with the client machine name.</span></li>
</ol>

<p><b><span style='font-family:Arial'>Note:</span></b></p>

<p><span style='font-family:Arial'>If your computer is attached to a workgroup
but is not attached to a Microsoft Windows domain, this sample will fail unless
you modify your Machine.config file.&nbsp; For instructions, see</span> <span
style='font-family:Arial'>&quot;Enabling 'Indigo' Security&nbsp;within a
Workgroup&quot; in the Longhorn SDK readme</span>.</p>

<p><span style='font-family:Arial'>&nbsp;</span></p>

</div>

</body>

</html>
